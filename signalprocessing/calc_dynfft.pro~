;+ 
; NAME: 
; CALC_DYNFFT
; 
; PURPOSE: 
; This procedure computes the dynamic FFT of a set of time series data.
;
; The maximum frequency calculated is given by:
;       fMax = 1/(2*dt)
; where dt is the time resolution of the data.
;
; Regularly spaced data is required; see notes on INTERPOLATE keyword for some
; additional info regarding this.
; 
; CATEGORY: 
; Signalprocessing
; 
; CALLING SEQUENCE: 
; result = CALC_DYNFFT( dataStruct [, INTERPOLATE=interpolate] [, DETREND=detrend] [ WINDOWLENGTH=windowLength] [, MAGNITUDE=magnitude] [, PHASE=phase] [, NORMALIZE=normalize] [, EPOCHTIME=epochTime])
;
; INPUTS:
; dataStruct:  A data structure containing a time vector and a data vector.  The structure
; should have the form of:
;       dataStruct = {time:timeVector, data:dataVector} 
; dataStruct.time is assumed to be in units of days (for Julian Days) unless the EPOCHTIME
; keyword is set.
;
; OUTPUTS:
; This function returns a data structure of the following form:
;       result = {time:time, freq:freq, fft:FFT}
;       
;       result.time: Time vector in same units as the input.  Each time in this vector is
;               the center of an FFT time window.
;       result.freq: Frequency vector in Hertz.  Note that above fMax = 1/(2*dt), computed
;               FFT values fold over into the the reverse of the negative spectrum.  See
;               IDL help for FFT command for details.
;       result.fft:  Two-dimensional array containing the results of the FFT computation.
;               The first dimension corresponds with time, and the second dimension corresponds
;               with frequency.  If the MAGNITUDE, PHASE, or NORMALIZE keywords are set, then 
;               result.fft will contain magnitude, phase, or normalized magnitudes, respectively,
;               rather than the complex FFT result.
;               
;
; OPTIONAL INPUTS:
;
; KEYWORD PARAMETERS:
; INTERPOLATE: Set this keyword to a time resolution in seconds to interpolate the input
; data.  Interpolation is required to place radar data onto a regular time grid before
; computing the FFT.  If INTERPOLATE is not set, a default value of 5 seconds is used.
; To disable interpolation (useful if data set is already uniform in time), set
; INTERPOLATE = -1.
;
; DETREND: Set this keyword to the degree polynomial to fit and then subtract from each set
; of windowed data.  By default, this is set to DETREND=1 which corresponds to a linear fit/
; detrending.  Set DETREND=0 to remove the average; set DETREND=-1 to disable detrending.
;
; WINDOWLENGTH: Set this keyword to set the length of the time window in seconds over which 
; to compute each FFT.  Default of WINDOWLENGTH = 600 s.
;
; MAGNITUDE: Set this keyword to return the unnormalized magnitude of the FFT.
;
; PHASE: Set this keyword to return the phase of the FFT in radians.
;
; NORMALIZE: Set this keyword to return the normalized magnitude of the FFT.
;
; EPOCHTIME: Set this keyword to indicate that the input time vector is in units of seconds,
; not days.
;
; EXAMPLE: 
; 
; COPYRIGHT:
; Non-Commercial Purpose License
; Copyright © November 14, 2006 by Virginia Polytechnic Institute and State University
; All rights reserved.
; Virginia Polytechnic Institute and State University (Virginia Tech) owns the DaViT
; software and its associated documentation (“Software”). You should carefully read the
; following terms and conditions before using this software. Your use of this Software
; indicates your acceptance of this license agreement and all terms and conditions.
; You are hereby licensed to use the Software for Non-Commercial Purpose only. Non-
; Commercial Purpose means the use of the Software solely for research. Non-
; Commercial Purpose excludes, without limitation, any use of the Software, as part of, or
; in any way in connection with a product or service which is sold, offered for sale,
; licensed, leased, loaned, or rented. Permission to use, copy, modify, and distribute this
; compilation for Non-Commercial Purpose is hereby granted without fee, subject to the
; following terms of this license.
; Copies and Modifications
; You must include the above copyright notice and this license on any copy or modification
; of this compilation. Each time you redistribute this Software, the recipient automatically
; receives a license to copy, distribute or modify the Software subject to these terms and
; conditions. You may not impose any further restrictions on this Software or any
; derivative works beyond those restrictions herein.
; You agree to use your best efforts to provide Virginia Polytechnic Institute and State
; University (Virginia Tech) with any modifications containing improvements or
; extensions and hereby grant Virginia Tech a perpetual, royalty-free license to use and
; distribute such modifications under the terms of this license. You agree to notify
; Virginia Tech of any inquiries you have for commercial use of the Software and/or its
; modifications and further agree to negotiate in good faith with Virginia Tech to license
; your modifications for commercial purposes. Notices, modifications, and questions may
; be directed by e-mail to Stephen Cammer at cammer@vbi.vt.edu.
; Commercial Use
; If you desire to use the software for profit-making or commercial purposes, you agree to
; negotiate in good faith a license with Virginia Tech prior to such profit-making or
; commercial use. Virginia Tech shall have no obligation to grant such license to you, and
; may grant exclusive or non-exclusive licenses to others. You may contact Stephen
; Cammer at email address cammer@vbi.vt.edu to discuss commercial use.
; Governing Law
; This agreement shall be governed by the laws of the Commonwealth of Virginia.
; Disclaimer of Warranty
; Because this software is licensed free of charge, there is no warranty for the program.
; Virginia Tech makes no warranty or representation that the operation of the software in
; this compilation will be error-free, and Virginia Tech is under no obligation to provide
; any services, by way of maintenance, update, or otherwise.
; THIS SOFTWARE AND THE ACCOMPANYING FILES ARE LICENSED “AS IS”
; AND WITHOUT WARRANTIES AS TO PERFORMANCE OR
; MERCHANTABILITY OR ANY OTHER WARRANTIES WHETHER EXPRESSED
; OR IMPLIED. NO WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE IS
; OFFERED. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF
; THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
; YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
; CORRECTION.
; Limitation of Liability
; IN NO EVENT WILL VIRGINIA TECH, OR ANY OTHER PARTY WHO MAY
; MODIFY AND/OR REDISTRIBUTE THE PRORAM AS PERMITTED ABOVE, BE
; LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
; INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
; INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
; OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED
; BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE
; WITH ANY OTHER PROGRAMS), EVEN IF VIRGINIA TECH OR OTHER PARTY
; HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
; Use of Name
; Users will not use the name of the Virginia Polytechnic Institute and State University nor
; any adaptation thereof in any publicity or advertising, without the prior written consent
; from Virginia Tech in each case.
; Export License
; Export of this software from the United States may require a specific license from the
; United States Government. It is the responsibility of any person or organization
; contemplating export to obtain such a license before exporting.
;
; MODIFICATION HISTORY: 
; Written by: Nathaniel Frissell, 2011
;-


FUNCTION CALC_DYNFFT,dataStruct_in              $
    ,INTERPOLATE        = interpolate           $
    ,DETREND            = detrend               $
    ,WINDOWLENGTH       = windowlength          $
    ,MAGNITUDE          = magnitude             $
    ,PHASE              = phase                 $
    ,NORMALIZE          = normalize             $
    ,EPOCHTIME          = epochTime

IF ~KEYWORD_SET(interpolate)    THEN interpolate        = 5.
IF ~KEYWORD_SET(detrend)        THEN detrend            = 1.
IF ~KEYWORD_SET(windowlength)   THEN windowlength       = 600.
IF ~KEYWORD_SET(epochTime)      THEN epochTime          = 0

dataStruct      = dataStruct_in
dataStruct      = INTERPOLATOR(dataStruct,interpolate,EPOCHTIME=epochTime)
dataStruct      = WINDOWIZE(dataStruct,windowLength,DETREND=detrend,EPOCHTIME=epochTime)

nWinTime        = N_ELEMENTS(dataStruct.data[0,*])
freq            = INDGEN(nWinTime)/(nWinTime*dataStruct.delta)
datafft         = FFT(dataStruct.data,DIMENSION=2)

IF KEYWORD_SET(magnitude)||KEYWORD_SET(normalize) THEN dataFFT = ABS(dataFFT)
IF KEYWORD_SET(normalize)       THEN dataFFT            = dataFFT / MAX(dataFFT)
IF KEYWORD_SET(phase)           THEN dataFFT            = ATAN(dataFFT,/PHASE)

RETURN,{time:dataStruct.time,freq:freq,fft:dataFFT}
END
