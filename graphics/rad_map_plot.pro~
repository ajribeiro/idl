;+
; NAME: 
; RAD_MAP_PLOT
;
; PURPOSE: 
; This procedure plots a map with potential contours, convection boundary, velocity vectors
; and some scales, colorbar and a title.
; 
; CATEGORY: 
; Graphics
; 
; CALLING SEQUENCE:
; RAD_MAP_PLOT
;
; KEYWORD PARAMETERS:
; DATE: A scalar or 2-element vector giving the time range to plot, 
; in YYYYMMDD or MMMYYYY format.
;
; TIME: A 2-element vector giving the time range to plot, in HHII format.
;
; LONG: Set this keyword to indicate that the TIME value is in HHIISS
; format rather than HHII format.
;
; INDEX: The index number of the map to plot. If not set, that map with the timestamp closest
; to the gien input date will be plotted.
;
; NORTH: Set this keyword to plot the convection pattern for the northern hemisphere.
;
; SOUTH: Set this keyword to plot the convection pattern for the southern hemisphere.
;
; HEMISPHERE; Set this to 1 for the northern and to -1 for the southern hemisphere.
;
; COORDS: Set this to a string containing the name of the coordinate system to plot the map in.
; Allowable systems are geographic ('geog'), magnetic ('magn') and magnetic local time ('mlt').
;
; COAST: Set this keyword to plot coast lines.
;
; NO_FILL: Set this keyword to surpress filling of the coastal lines.
;
; CROSS: Set this keyword to plot a coordinate cross rather than a box.
;
; SCALE: Set this keyword to a 2-element vector containing the minimum and maximum velocity 
; used for coloring the vectors.
;
; MODEL: Set this keyword to include velocity vectors added by the model.
;
; MERGE: Set this keyword to plot velocity vectors
;
; TRUE: Set this keyword to plot velocity vectors
;
; LOS: Set this keyword to plot velocity vectors
;
; GRAD: Set this keyword to plot velocity vectors calculated from the ExB drift using the coefficients
; of the potential.
;
; NEW_PAGE: Set this keyword to plot multiple maps each on a separate page.
;
; COMMON BLOCKS:
; RAD_DATA_BLK: The common block holding map data.
;
; MODIFICATION HISTORY: 
; Written by Lasse Clausen, Dec, 11 2009
;-
pro rad_map_plot, date=date, time=time, long=long, $
	coords=coords, index=index, scale=scale, new_page=new_page, $
	north=north, south=south, hemisphere=hemisphere, $
	xrange=xrange, yrange=yrange, $
	cross=cross, coast=coast, no_fill=no_fill, orig_fan=orig_fan, $
	model=model, merge=merge, true=true, los=los, grad=grad, $
	vec_radar_ids=vec_radar_ids, fan_radar_ids=fan_radar_ids

common rad_data_blk

; check hemisphere and north and south
if ~keyword_set(hemisphere) then begin
	if keyword_set(north) then $
		hemisphere = 1. $
	else if keyword_set(south) then $
		hemisphere = -1. $
	else $
		hemisphere = 1.
endif

if ~keyword_set(scale) then $
	scale = [0,2000]

if ~keyword_set(yrange) then $
	yrange = [-31,31]

if ~keyword_set(xrange) then $
	xrange = [-31,31]

; this makes int_hemi 0 for north and 1 for south
int_hemi = (hemisphere lt 0)

if rad_map_info[int_hemi].nrecs eq 0L then begin
	if ~keyword_set(silent) then $
		prinfo, 'No data loaded.'
	return
endif

if ~keyword_set(date) then begin
	if ~keyword_set(silent) then $
		prinfo, 'No DATE given, trying for scan date.'
	caldat, (*rad_map_data[int_hemi]).sjuls[0], month, day, year
	date = year*10000L + month*100L + day
endif

if n_elements(time) lt 1 then $
	time = 1200
sfjul, date, time, sjul, fjul

if n_elements(time) eq 2 then begin
	npanels = (fjul-sjul)*1440.d/10.d
endif else begin
	npanels = 1
endelse

; calculate number of panels per page
xmaps = floor(sqrt(npanels)) > 1
ymaps = ceil(npanels/float(xmaps)) > 1

; take into account format of page
; if landscape, make xmaps > ymaps
fmt = get_format(landscape=ls, sardines=sd)
if ls then begin
	if ymaps gt xmaps then begin
		tt = xmaps
		xmaps = ymaps
		ymaps = tt
	endif
; if portrait, make ymaps > xmaps
endif else begin
	if xmaps gt ymaps then begin
		tt = ymaps
		ymaps = xmaps
		xmaps = tt
	endif
endelse

clear_page

; loop through panels
for b=0, npanels-1 do begin

	if keyword_set(new_page) then begin
		clear_page
		xmaps = 1
		ymaps = 1
		xmap = 0
		ymap = 0
	endif else begin
		xmap = b mod xmaps
		ymap = b/xmaps
	endelse
	
	ajul = sjul+b*10.d/1440.d
	sfjul, date, time, ajul, /jul_to

	factor = 1.*2000./(scale[1]-scale[0])

	; calculate index from date and time
	dd = min( abs( (*rad_map_data[int_hemi]).mjuls-ajul ), index)

	; check if time ditance is not too big
	if dd*1440.d gt 60. then $
		prinfo, 'Map found, but '+string(dd*1440.d,format='(I4)')+' minutes off chosen time.'

	aspect = float(xrange[1]-xrange[0])/float(yrange[1]-yrange[0])
	if ~keyword_set(position) then $
		position = define_panel(xmaps, ymaps, xmap, ymap, aspect=aspect, /bar, /with_info)
	
	rad_map_plot_panel, xmaps, ymaps, xmap, ymap, $
		date=date, time=time, long=long, $
		north=north, south=south, hemisphere=hemisphere, $
		coords=coords, index=index, scale=scale, $
		no_fill=no_fill, cross=cross, coast=coast, $
		model=model, merge=merge, true=true, los=los, grad=grad, $
		xrange=xrange, yrange=yrange, factor=factor, orig_fan=orig_fan, $
		vec_radar_ids=vec_radar_ids, fan_radar_ids=fan_radar_ids, $
		position=position

	rad_map_plot_title, position=position, index=index, $
		charsize=.6, int_hemisphere=int_hemi

	rad_map_plot_imf, xmaps, ymaps, xmap, ymap, $
		index=index, size=.2/sqrt(xmaps > ymaps)*(position[2]-position[0]), $
    int_hemisphere=int_hemi
	
	set_format, /sardi
	sfjul, odate, otime, ajul+[-1.d,1.d]*30.d/1440.d, /jul_to
	omn_read, odate, time=otime
	opos = [position[0], position[3]+.17, position[2], position[3]+.26]
	omn_plot_panel, date=date, time=otime, position=opos, $
		param='by_gsm', yticks=2, charsize=.4, /xstyle, /first
	oplot, replicate(ajul,2), !y.crange, linestyle=2, color=252
	opos = [position[0], position[3]+.06, position[2], position[3]+.15]
	omn_plot_panel, date=date, time=otime, position=opos, $
		param='bz_gsm', yticks=2, /last, charsize=.4, /xstyle, /first
	oplot, replicate(ajul,2), !y.crange, linestyle=2, color=252

	if keyword_set(new_page) then begin
		rad_map_plot_vector_scale, xmaps, ymaps, xmap, ymap, $
			scale=scale, xrange=xrange, factor=factor, tposition=position
		cb_pos = define_cb_position(position, height=50, gap=.2*(position[2]-position[0]))
		plot_colorbar, /square, scale=scale, parameter='velocity', position=cb_pos, $
			/no_rotate
		if keyword_set(orig_fan) then begin
			cb_pos = define_cb_position(position, height=50, gap=.13*(position[2]-position[0]))
			plot_colorbar, /square, scale=.5*[-scale[1],scale[1]], parameter='velocity', $
				/left, position=cb_pos, legend=' '
		endif
	endif

endfor

if ~keyword_set(new_page) then begin
	rad_map_plot_vector_scale, xmaps, ymaps, xmap, ymap, $
		scale=scale, xrange=xrange, factor=factor, tposition=position
	cb_pos = define_cb_position(position, height=50, gap=.2*(position[2]-position[0]))
	plot_colorbar, /square, scale=scale, parameter='velocity', position=cb_pos, $
		/no_rotate
	if keyword_set(orig_fan) then begin
		cb_pos = define_cb_position(position, height=50, gap=.13*(position[2]-position[0]))
		plot_colorbar, /square, scale=.5*[-scale[1],scale[1]], parameter='velocity', $
			/left, position=cb_pos, legend=' '
	endif
endif

end
